import google.generativeai as genai
from typing import List, Dict, Any, Optional
import json
import base64
from PIL import Image
import io
from app.core.config import settings

class GeminiService:
    def __init__(self):
        genai.configure(api_key=settings.GEMINI_API_KEY)
        self.model = genai.GenerativeModel('gemini-pro')
        try:
            self.vision_model = genai.GenerativeModel('gemini-pro-vision')
        except:
            self.vision_model = None
    
    async def generate_audit_report(self, audit_data: Dict[str, Any]) -> Dict[str, Any]:
        """Generate comprehensive audit report using Gemini AI"""
        
        prompt = f"""
        You are an expert hotel audit analyst. Generate a comprehensive audit report based on the following data:
        
        Property: {audit_data.get('property_name', 'Unknown')}
        Location: {audit_data.get('location', 'Unknown')}
        Audit Date: {audit_data.get('audit_date', 'Unknown')}
        Audit Type: {audit_data.get('audit_type', 'Standard')}
        
        Audit Items Data:
        {json.dumps(audit_data.get('audit_items', []), indent=2)}
        
        Please provide:
        1. Executive Summary (2-3 sentences)
        2. Key Findings (list of most important issues)
        3. Recommendations (actionable steps for improvement)
        4. Compliance Overview (summary of compliance status by section)
        5. AI Insights (patterns and trends observed)
        
        Format your response as JSON with these exact keys:
        - summary
        - key_findings (array)
        - recommendations (array)
        - compliance_overview (object)
        - ai_insights (object)
        """
        
        try:
            response = self.model.generate_content(prompt)
            
            # Try to parse as JSON, fallback to structured text
            try:
                return json.loads(response.text)
            except json.JSONDecodeError:
                return {
                    "summary": "AI-generated audit report based on collected data.",
                    "key_findings": ["Analysis completed using Gemini AI"],
                    "recommendations": ["Implement suggested improvements"],
                    "compliance_overview": {"overall": "Analysis pending"},
                    "ai_insights": {"status": "Generated by Gemini AI", "raw_response": response.text}
                }
                
        except Exception as e:
            return {
                "summary": f"Error generating report: {str(e)}",
                "key_findings": ["Unable to generate AI analysis"],
                "recommendations": ["Manual review recommended"],
                "compliance_overview": {"error": True},
                "ai_insights": {"error": str(e)}
            }
    
    async def analyze_audit_photo(self, image_data: str, context: str) -> Dict[str, Any]:
        """Analyze audit photo using Gemini Vision"""
        
        if not self.vision_model:
            return {
                "compliance_status": "unknown",
                "confidence_score": 0.0,
                "observations": ["Vision model not available"],
                "suggestions": ["Manual review required"],
                "ai_score": None
            }
        
        try:
            # Decode base64 image
            image_bytes = base64.b64decode(image_data)
            image = Image.open(io.BytesIO(image_bytes))
            
            prompt = f"""
            Analyze this hotel audit photo in the context of: {context}
            
            Please assess:
            1. Compliance status (compliant/non-compliant/partial)
            2. Confidence level (0-1)
            3. Key observations
            4. Improvement suggestions
            5. Suggested compliance score (0-100)
            
            Respond in JSON format with keys: compliance_status, confidence_score, observations, suggestions, ai_score
            """
            
            response = self.vision_model.generate_content([prompt, image])
            
            try:
                return json.loads(response.text)
            except json.JSONDecodeError:
                return {
                    "compliance_status": "unknown",
                    "confidence_score": 0.8,
                    "observations": [response.text[:200] + "..."],
                    "suggestions": ["Review AI analysis"],
                    "ai_score": 75.0
                }
                
        except Exception as e:
            return {
                "compliance_status": "error",
                "confidence_score": 0.0,
                "observations": [f"Analysis error: {str(e)}"],
                "suggestions": ["Manual review required"],
                "ai_score": None
            }
    
    async def suggest_audit_score(self, item_description: str, observations: str) -> Dict[str, Any]:
        """Suggest audit score based on observations"""
        
        prompt = f"""
        As a hotel audit expert, suggest a compliance score for this audit item:
        
        Item: {item_description}
        Observations: {observations}
        
        Provide:
        1. Suggested score (0-100)
        2. Confidence level (0-1)
        3. Reasoning for the score
        4. Compliance zone (green: 80-100, amber: 60-79, red: 0-59)
        
        Respond in JSON format with keys: suggested_score, confidence, reasoning, compliance_zone
        """
        
        try:
            response = self.model.generate_content(prompt)
            
            try:
                result = json.loads(response.text)
                return result
            except json.JSONDecodeError:
                return {
                    "suggested_score": 75.0,
                    "confidence": 0.7,
                    "reasoning": response.text[:200] + "...",
                    "compliance_zone": "amber"
                }
                
        except Exception as e:
            return {
                "suggested_score": 50.0,
                "confidence": 0.0,
                "reasoning": f"Error: {str(e)}",
                "compliance_zone": "red"
            }

# Create global instance
gemini_service = GeminiService()
